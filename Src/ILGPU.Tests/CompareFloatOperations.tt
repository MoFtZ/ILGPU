// ---------------------------------------------------------------------------------------
//                                        ILGPU
//                           Copyright (c) 2021 ILGPU Project
//                                    www.ilgpu.net
//
// File: CompareFloatOperations.tt/CompareFloatOperations.cs
//
// This file is part of ILGPU and is distributed under the University of Illinois Open
// Source License. See LICENSE.txt for details.
// ---------------------------------------------------------------------------------------

<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="Generic/ConfigurationBase.tt" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
using ILGPU.Runtime;
using System;
using System.Linq;
using Xunit;
using Xunit.Abstractions;

<#
var operationConfigurations = new (string, string)[]
    {
        ("Less", "<"),
        ("LessEqual", "<="),
        ("Greater", ">"),
        ("GreaterEqual", ">="),
        ("Equal", "=="),
        ("NotEqual", "!="),
    };

// Test name and format string
//  {0} is the type name e.g. float or double
//  {1} is the type suffix e.g. f
var floatLimits = new (string, string)[]
    {
        ("PositiveInfinity", "{0}.PositiveInfinity"),
        ("NegativeInfinity", "{0}.NegativeInfinity"),
        ("MaxValue", "{0}.MaxValue"),
        ("MinValue", "{0}.MinValue"),
        ("Epsilon", "{0}.Epsilon"),
        ("Precision9", "{2}123456.789{1}"),
        ("Precision17", "{2}1.0000000000000002{1}"),
    };
#>

#pragma warning disable IDE0047 // Remove unnecessary parentheses

namespace ILGPU.Tests
{
    public abstract class CompareFloatOperations : TestBase
    {
        protected CompareFloatOperations(
            ITestOutputHelper output,
            TestContext testContext)
            : base(output, testContext)
        { }

<# foreach (var (operationName, infix) in operationConfigurations) { #>
<#      foreach (var type in FloatTypes) { #>
<#         var floatRanges = GetFloatRanges(type, true, true, true, false); #>
<#         var baseName = "_" + operationName + "_" + type.Name; #>
<#         var testName = "CompareOperation" + baseName; #>
<#         var kernelName = "CompareOperationKernel" + testName; #>
        internal static void <#= kernelName #>(
            Index1D index,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> a,
            ArrayView1D<<#= type.Type #>, Stride1D.Dense> b,
            ArrayView1D<int, Stride1D.Dense> c)
        {
            var result = a[index] <#= infix #> b[index];
            c[index] = result ? 1 : 0;
        }

        public static TheoryData<object, object> <#= testName #>Data =>
            new TheoryData<object, object>
            {
<#          foreach (var range in floatRanges) { #>
<#              foreach (var range2 in floatRanges) { #>
                { <#= range #>, <#= range2 #> },
<#              } #>
<#          } #>
            };

        [Theory]
        [MemberData(nameof(<#= testName #>Data))]
        [KernelMethod(nameof(<#= kernelName #>))]
        public void <#= testName #>(
            <#= type.Type #> left,
            <#= type.Type #> right)
        {
            const int length = 32;
            using var a = Accelerator.Allocate1D<<#= type.Type #>>(length);
            using var b = Accelerator.Allocate1D<<#= type.Type #>>(length);
            using var c = Accelerator.Allocate1D<int>(length);
            Initialize(a.View, left);
            Initialize(b.View, right);
            Execute(length, a.View, b.View, c.View);

            var result = left <#= infix #> right ? 1 : 0;
            var reference = Enumerable.Repeat(result, length).ToArray();
            Verify(c.View, reference);
        }

<#      } #>
<# } #>

    }
}

#pragma warning restore IDE0047 // Remove unnecessary parentheses